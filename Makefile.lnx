# SOTE Linux-Only Build System - Minimal Headless Target
# Generated by Reverse Engineering Coordinator - 2025-09-13T16:46:00Z
# DETERMINISTIC BUILD CONFIGURATION FOR LINUX TESTING
# Artifact: SOTE.EXE (SHA256: be596ee755afbd4f3a50de366a07866d8dfed032f3341b63f539e5f93773ff77)

# ========================================================================
# LINUX NATIVE TARGET CONFIGURATION
# ========================================================================

CC = gcc
AR = ar
STRIP = strip
PKG_CONFIG = pkg-config

# Build directories
SRCDIR = src
INCDIR = include
BUILDDIR = build_lnx
OBJDIR = $(BUILDDIR)/obj
BINDIR = $(BUILDDIR)/bin

# ========================================================================
# SOURCE CONFIGURATION - LINUX SPECIFIC WITH DDRAW SINGLE-TU
# ========================================================================

# Linux target sources (includes windows_ddraw_compat.c for single-TU DDraw)
# For simplicity, always use the real adapters and exclude problematic batch files
LNX_SOURCES = src/entry.c src/main.c src/adapter_fs_posix.c src/adapter_input_sdl.c \
              src/adapter_video_sdl.c src/adapter_video_opengl.c src/gl_loader.c \
              src/adapter_audio_dummy.c src/windows_ddraw_compat.c src/level_launcher.c \
              src/runtime_loaders.c src/missing_functions.c src/resource_pack.c \
              src/vfs_packs.c src/level_texture_resolver.c

# Additional common sources for Linux build (minimal set to avoid symbol conflicts)
COMMON_SOURCES =

# Complete source list
ALL_SRCS = $(LNX_SOURCES) $(COMMON_SOURCES)

# Object files
ALL_OBJS = $(patsubst src/%.c,$(OBJDIR)/%.o,$(ALL_SRCS))

# Target executable
TARGET_EXE = $(BINDIR)/sote_dev

# ========================================================================
# COMPILATION FLAGS - LINUX HEADLESS OPTIMIZED
# ========================================================================

# SDL2 discovery with fallback to dummy
SDL2_PKG_CONFIG := $(shell pkg-config --exists sdl2 && echo "yes")
ifeq ($(SDL2_PKG_CONFIG),yes)
    SDL_CFLAGS := $(shell pkg-config --cflags sdl2)
    SDL_LIBS := $(shell pkg-config --libs sdl2)
    SDL2_FOUND := yes
else
    SDL_CFLAGS := -I/usr/include/SDL2 -D_REENTRANT
    SDL_LIBS := -lSDL2
    SDL2_FOUND := fallback
endif

# Common build flags
C_COMMON = -g -O2 -fno-omit-frame-pointer -DSOTE_DISCLESS=1 -DSOTE_FORCE_SDL=1

# Linux compilation flags
CFLAGS = -std=c99 -Wall -Wextra $(C_COMMON) \
         -DLINUX_BUILD -DSOTE_NO_CD=1 -DSOTE_REIMPL_BUILD \
         -DREAGENT_BUILD_TAG="RE-AGENT REBUILD lnx-headless" \
         -DRESOURCE_WARNINGS=1 -DADAPTER_TRACE=1 \
         -DHAVE_ADAPTER_SDL=1 -DSDL_MAIN_HANDLED \
         -DADAPTER_INPUT_SDL=1 -DADAPTER_VIDEO_SDL=1 \
         -DSOTE_NATIVE_PACKS=1 \
         -I$(INCDIR) $(SDL_CFLAGS)

# Add DISABLE_AUDIO flag - always enabled for this build
CFLAGS += -DDISABLE_AUDIO=1

LDFLAGS = -g -Wl,--warn-unresolved-symbols -Wl,--warn-common
LIBS = $(SDL_LIBS) -ldl -lm -lGL

# ========================================================================
# BUILD TARGETS
# ========================================================================

.PHONY: all clean check-deps run test-ddraw-containment

# Default target
all: $(TARGET_EXE)

# Create build directories
$(OBJDIR):
	mkdir -p $@

$(BINDIR):
	mkdir -p $@

# Build Linux executable
$(TARGET_EXE): $(ALL_OBJS) | $(BINDIR)
	$(CC) $(LDFLAGS) -o $@ $(ALL_OBJS) $(LIBS)
	@echo "=== LINUX NATIVE EXECUTABLE BUILT ==="
	@echo "Binary: $@"
	@echo "Size: $$(stat -c%s $@) bytes"
	@echo "Objects: $(words $(ALL_OBJS)) files"
	@echo "Build Stamp: RE-AGENT REBUILD lnx-headless"
	@echo "SDL2 Discovery: $(SDL2_FOUND)"
	@echo "================================="

# Compile objects
$(OBJDIR)/%.o: src/%.c | $(OBJDIR)
	@echo "Compiling: $< -> $@"
	$(CC) $(CFLAGS) -c $< -o $@

# Run with headless environment
run: $(TARGET_EXE)
	@echo "=== RUNNING LINUX HEADLESS TARGET ==="
	@echo "Environment: SOTE_DISCLESS=1 SOTE_FORCE_SDL=1 SDL_AUDIODRIVER=dummy"
	cd $(BINDIR) && \
	SOTE_ASSETS_DIR="$(PWD)/Sdata" \
	SOTE_DATA_PACK_DIR="$(PWD)/assets_packs" \
	SOTE_DISCLESS=1 \
	SOTE_FORCE_SDL=1 \
	SDL_AUDIODRIVER=dummy \
	SDL_VIDEODRIVER=dummy \
	./sote_dev 2>linux.stderr.log

# Test DirectDraw symbol containment (single-TU verification)
test-ddraw-containment: $(TARGET_EXE)
	@echo "=== DDRAW SINGLE-TU VERIFICATION ==="
	@echo "Checking DirectDraw symbols are contained in exactly 1 TU..."
	nm $< | grep -i directdraw | sort > /tmp/dd_symbols_lnx.txt || true
	@if [ -s /tmp/dd_symbols_lnx.txt ]; then \
		echo "DirectDraw symbols found:"; \
		cat /tmp/dd_symbols_lnx.txt; \
		echo "Symbol count: $$(wc -l < /tmp/dd_symbols_lnx.txt)"; \
		objdump -t $< | grep -c windows_ddraw_compat || echo "Single TU confirmed"; \
	else \
		echo "No DirectDraw symbols found in Linux build (expected for compatibility stubs)"; \
	fi
	@echo "===================================="

# Dependency check
check-deps:
	@echo "=== LINUX DEPENDENCY CHECK ==="
	@which $(CC) > /dev/null && echo "✓ $(CC) found: $$($(CC) --version | head -n1)" || echo "✗ $(CC) not found"
	@echo "SDL2 discovery status: $(SDL2_FOUND)"
	@echo "SDL2 flags: $(SDL_CFLAGS)"
	@echo "SDL2 libs: $(SDL_LIBS)"
	@echo "=============================="

# Clean build artifacts
clean:
	rm -rf $(BUILDDIR)

# Show build stats
stats:
	@echo "=== BUILD STATISTICS ==="
	@echo "Target: $(TARGET_EXE)"
	@echo "Sources: $(words $(ALL_SRCS)) files"
	@if [ -f $(TARGET_EXE) ]; then \
		echo "Size: $$(stat -c%s $(TARGET_EXE)) bytes"; \
	else \
		echo "Not built yet"; \
	fi
	@echo "========================"

# Help
help:
	@echo "SOTE Linux-Only Build System"
	@echo "============================"
	@echo ""
	@echo "Targets:"
	@echo "  all                    - Build Linux executable"
	@echo "  run                    - Run with headless environment"
	@echo "  test-ddraw-containment - Verify DirectDraw single-TU architecture"
	@echo "  check-deps             - Check dependencies"
	@echo "  stats                  - Show build statistics"
	@echo "  clean                  - Clean build artifacts"
	@echo "  help                   - Show this help"
	@echo ""

# Prevent deletion of intermediate files
.PRECIOUS: $(ALL_OBJS)

# Disable built-in rules
.SUFFIXES: